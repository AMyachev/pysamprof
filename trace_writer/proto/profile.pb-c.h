/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: profile.proto */

#ifndef PROTOBUF_C_profile_2eproto__INCLUDED
#define PROTOBUF_C_profile_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Perftools__Profiles__Profile Perftools__Profiles__Profile;
typedef struct _Perftools__Profiles__ValueType Perftools__Profiles__ValueType;
typedef struct _Perftools__Profiles__MapStrFieldEntry Perftools__Profiles__MapStrFieldEntry;
typedef struct _Perftools__Profiles__MapIntFieldEntry Perftools__Profiles__MapIntFieldEntry;
typedef struct _Perftools__Profiles__Sample Perftools__Profiles__Sample;
typedef struct _Perftools__Profiles__Label Perftools__Profiles__Label;
typedef struct _Perftools__Profiles__Mapping Perftools__Profiles__Mapping;
typedef struct _Perftools__Profiles__Location Perftools__Profiles__Location;
typedef struct _Perftools__Profiles__Line Perftools__Profiles__Line;
typedef struct _Perftools__Profiles__Function Perftools__Profiles__Function;


/* --- enums --- */


/* --- messages --- */

struct  _Perftools__Profiles__Profile
{
  ProtobufCMessage base;
  size_t n_sampletype;
  Perftools__Profiles__ValueType **sampletype;
  /*
   *string DefaultSampleType = 15;
   */
  size_t n_sample;
  Perftools__Profiles__Sample **sample;
  size_t n_mapping;
  Perftools__Profiles__Mapping **mapping;
  size_t n_location;
  Perftools__Profiles__Location **location;
  /*
   *repeated string Comments = 16;
   */
  size_t n_function;
  Perftools__Profiles__Function **function;
  protobuf_c_boolean has_timenanos;
  int64_t timenanos;
  protobuf_c_boolean has_durationnanos;
  int64_t durationnanos;
  Perftools__Profiles__ValueType *periodtype;
  protobuf_c_boolean has_period;
  int64_t period;
  /*
   * Indices into string table.
   */
  size_t n_commentx;
  int64_t *commentx;
  /*
   * Index into string table.
   */
  protobuf_c_boolean has_dropframesx;
  int64_t dropframesx;
  /*
   * Index into string table.
   */
  protobuf_c_boolean has_keepframesx;
  int64_t keepframesx;
  size_t n_stringtable;
  char **stringtable;
  protobuf_c_boolean has_default_sample_typex;
  int64_t default_sample_typex;
};
#define PERFTOOLS__PROFILES__PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__profiles__profile__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,0, NULL, 0,0, 0,NULL, 0,0, 0,0, 0,NULL, 0,0 }


struct  _Perftools__Profiles__ValueType
{
  ProtobufCMessage base;
  char *type;
  char *unit;
  /*
   * Index into string table.
   */
  protobuf_c_boolean has_typex;
  int64_t typex;
  /*
   * Index into string table.
   */
  protobuf_c_boolean has_unitx;
  int64_t unitx;
};
#define PERFTOOLS__PROFILES__VALUE_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__profiles__value_type__descriptor) \
    , NULL, NULL, 0,0, 0,0 }


struct  _Perftools__Profiles__MapStrFieldEntry
{
  ProtobufCMessage base;
  char *key;
  size_t n_value;
  char **value;
};
#define PERFTOOLS__PROFILES__MAP_STR_FIELD_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__profiles__map_str_field_entry__descriptor) \
    , NULL, 0,NULL }


struct  _Perftools__Profiles__MapIntFieldEntry
{
  ProtobufCMessage base;
  char *key;
  size_t n_value;
  int64_t *value;
};
#define PERFTOOLS__PROFILES__MAP_INT_FIELD_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__profiles__map_int_field_entry__descriptor) \
    , NULL, 0,NULL }


struct  _Perftools__Profiles__Sample
{
  ProtobufCMessage base;
  size_t n_location;
  Perftools__Profiles__Location **location;
  size_t n_value;
  int64_t *value;
  size_t n_label;
  Perftools__Profiles__MapStrFieldEntry **label;
  size_t n_numlabel;
  Perftools__Profiles__MapIntFieldEntry **numlabel;
  size_t n_locationidx;
  uint64_t *locationidx;
  size_t n_labelx;
  Perftools__Profiles__Label **labelx;
};
#define PERFTOOLS__PROFILES__SAMPLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__profiles__sample__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _Perftools__Profiles__Label
{
  ProtobufCMessage base;
  /*
   * Index into string table
   */
  protobuf_c_boolean has_keyx;
  int64_t keyx;
  /*
   * Index into string table
   */
  protobuf_c_boolean has_strx;
  int64_t strx;
  protobuf_c_boolean has_numx;
  int64_t numx;
};
#define PERFTOOLS__PROFILES__LABEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__profiles__label__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Perftools__Profiles__Mapping
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
  protobuf_c_boolean has_start;
  uint64_t start;
  protobuf_c_boolean has_limit;
  uint64_t limit;
  protobuf_c_boolean has_offset;
  uint64_t offset;
  char *file;
  char *buildid;
  protobuf_c_boolean has_hasfunctions;
  protobuf_c_boolean hasfunctions;
  protobuf_c_boolean has_hasfilenames;
  protobuf_c_boolean hasfilenames;
  protobuf_c_boolean has_haslinenumbers;
  protobuf_c_boolean haslinenumbers;
  protobuf_c_boolean has_hasinlineframes;
  protobuf_c_boolean hasinlineframes;
  /*
   * Index into string table
   */
  protobuf_c_boolean has_filex;
  int64_t filex;
  /*
   * Index into string table
   */
  protobuf_c_boolean has_buildidx;
  int64_t buildidx;
};
#define PERFTOOLS__PROFILES__MAPPING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__profiles__mapping__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Perftools__Profiles__Location
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
  Perftools__Profiles__Mapping *mapping;
  protobuf_c_boolean has_address;
  uint64_t address;
  size_t n_line;
  Perftools__Profiles__Line **line;
  protobuf_c_boolean has_mappingidx;
  uint64_t mappingidx;
};
#define PERFTOOLS__PROFILES__LOCATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__profiles__location__descriptor) \
    , 0,0, NULL, 0,0, 0,NULL, 0,0 }


struct  _Perftools__Profiles__Line
{
  ProtobufCMessage base;
  Perftools__Profiles__Function *function;
  protobuf_c_boolean has_line;
  int64_t line;
  protobuf_c_boolean has_functionidx;
  uint64_t functionidx;
};
#define PERFTOOLS__PROFILES__LINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__profiles__line__descriptor) \
    , NULL, 0,0, 0,0 }


struct  _Perftools__Profiles__Function
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
  char *name;
  char *systemname;
  char *filename;
  protobuf_c_boolean has_startline;
  int64_t startline;
  /*
   * Index into string table
   */
  protobuf_c_boolean has_namex;
  int64_t namex;
  /*
   * Index into string table
   */
  protobuf_c_boolean has_systemnamex;
  int64_t systemnamex;
  /*
   * Index into string table
   */
  protobuf_c_boolean has_filenamex;
  int64_t filenamex;
};
#define PERFTOOLS__PROFILES__FUNCTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__profiles__function__descriptor) \
    , 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0 }


/* Perftools__Profiles__Profile methods */
void   perftools__profiles__profile__init
                     (Perftools__Profiles__Profile         *message);
size_t perftools__profiles__profile__get_packed_size
                     (const Perftools__Profiles__Profile   *message);
size_t perftools__profiles__profile__pack
                     (const Perftools__Profiles__Profile   *message,
                      uint8_t             *out);
size_t perftools__profiles__profile__pack_to_buffer
                     (const Perftools__Profiles__Profile   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Profiles__Profile *
       perftools__profiles__profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__profiles__profile__free_unpacked
                     (Perftools__Profiles__Profile *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Profiles__ValueType methods */
void   perftools__profiles__value_type__init
                     (Perftools__Profiles__ValueType         *message);
size_t perftools__profiles__value_type__get_packed_size
                     (const Perftools__Profiles__ValueType   *message);
size_t perftools__profiles__value_type__pack
                     (const Perftools__Profiles__ValueType   *message,
                      uint8_t             *out);
size_t perftools__profiles__value_type__pack_to_buffer
                     (const Perftools__Profiles__ValueType   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Profiles__ValueType *
       perftools__profiles__value_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__profiles__value_type__free_unpacked
                     (Perftools__Profiles__ValueType *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Profiles__MapStrFieldEntry methods */
void   perftools__profiles__map_str_field_entry__init
                     (Perftools__Profiles__MapStrFieldEntry         *message);
size_t perftools__profiles__map_str_field_entry__get_packed_size
                     (const Perftools__Profiles__MapStrFieldEntry   *message);
size_t perftools__profiles__map_str_field_entry__pack
                     (const Perftools__Profiles__MapStrFieldEntry   *message,
                      uint8_t             *out);
size_t perftools__profiles__map_str_field_entry__pack_to_buffer
                     (const Perftools__Profiles__MapStrFieldEntry   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Profiles__MapStrFieldEntry *
       perftools__profiles__map_str_field_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__profiles__map_str_field_entry__free_unpacked
                     (Perftools__Profiles__MapStrFieldEntry *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Profiles__MapIntFieldEntry methods */
void   perftools__profiles__map_int_field_entry__init
                     (Perftools__Profiles__MapIntFieldEntry         *message);
size_t perftools__profiles__map_int_field_entry__get_packed_size
                     (const Perftools__Profiles__MapIntFieldEntry   *message);
size_t perftools__profiles__map_int_field_entry__pack
                     (const Perftools__Profiles__MapIntFieldEntry   *message,
                      uint8_t             *out);
size_t perftools__profiles__map_int_field_entry__pack_to_buffer
                     (const Perftools__Profiles__MapIntFieldEntry   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Profiles__MapIntFieldEntry *
       perftools__profiles__map_int_field_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__profiles__map_int_field_entry__free_unpacked
                     (Perftools__Profiles__MapIntFieldEntry *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Profiles__Sample methods */
void   perftools__profiles__sample__init
                     (Perftools__Profiles__Sample         *message);
size_t perftools__profiles__sample__get_packed_size
                     (const Perftools__Profiles__Sample   *message);
size_t perftools__profiles__sample__pack
                     (const Perftools__Profiles__Sample   *message,
                      uint8_t             *out);
size_t perftools__profiles__sample__pack_to_buffer
                     (const Perftools__Profiles__Sample   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Profiles__Sample *
       perftools__profiles__sample__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__profiles__sample__free_unpacked
                     (Perftools__Profiles__Sample *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Profiles__Label methods */
void   perftools__profiles__label__init
                     (Perftools__Profiles__Label         *message);
size_t perftools__profiles__label__get_packed_size
                     (const Perftools__Profiles__Label   *message);
size_t perftools__profiles__label__pack
                     (const Perftools__Profiles__Label   *message,
                      uint8_t             *out);
size_t perftools__profiles__label__pack_to_buffer
                     (const Perftools__Profiles__Label   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Profiles__Label *
       perftools__profiles__label__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__profiles__label__free_unpacked
                     (Perftools__Profiles__Label *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Profiles__Mapping methods */
void   perftools__profiles__mapping__init
                     (Perftools__Profiles__Mapping         *message);
size_t perftools__profiles__mapping__get_packed_size
                     (const Perftools__Profiles__Mapping   *message);
size_t perftools__profiles__mapping__pack
                     (const Perftools__Profiles__Mapping   *message,
                      uint8_t             *out);
size_t perftools__profiles__mapping__pack_to_buffer
                     (const Perftools__Profiles__Mapping   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Profiles__Mapping *
       perftools__profiles__mapping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__profiles__mapping__free_unpacked
                     (Perftools__Profiles__Mapping *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Profiles__Location methods */
void   perftools__profiles__location__init
                     (Perftools__Profiles__Location         *message);
size_t perftools__profiles__location__get_packed_size
                     (const Perftools__Profiles__Location   *message);
size_t perftools__profiles__location__pack
                     (const Perftools__Profiles__Location   *message,
                      uint8_t             *out);
size_t perftools__profiles__location__pack_to_buffer
                     (const Perftools__Profiles__Location   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Profiles__Location *
       perftools__profiles__location__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__profiles__location__free_unpacked
                     (Perftools__Profiles__Location *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Profiles__Line methods */
void   perftools__profiles__line__init
                     (Perftools__Profiles__Line         *message);
size_t perftools__profiles__line__get_packed_size
                     (const Perftools__Profiles__Line   *message);
size_t perftools__profiles__line__pack
                     (const Perftools__Profiles__Line   *message,
                      uint8_t             *out);
size_t perftools__profiles__line__pack_to_buffer
                     (const Perftools__Profiles__Line   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Profiles__Line *
       perftools__profiles__line__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__profiles__line__free_unpacked
                     (Perftools__Profiles__Line *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Profiles__Function methods */
void   perftools__profiles__function__init
                     (Perftools__Profiles__Function         *message);
size_t perftools__profiles__function__get_packed_size
                     (const Perftools__Profiles__Function   *message);
size_t perftools__profiles__function__pack
                     (const Perftools__Profiles__Function   *message,
                      uint8_t             *out);
size_t perftools__profiles__function__pack_to_buffer
                     (const Perftools__Profiles__Function   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Profiles__Function *
       perftools__profiles__function__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__profiles__function__free_unpacked
                     (Perftools__Profiles__Function *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Perftools__Profiles__Profile_Closure)
                 (const Perftools__Profiles__Profile *message,
                  void *closure_data);
typedef void (*Perftools__Profiles__ValueType_Closure)
                 (const Perftools__Profiles__ValueType *message,
                  void *closure_data);
typedef void (*Perftools__Profiles__MapStrFieldEntry_Closure)
                 (const Perftools__Profiles__MapStrFieldEntry *message,
                  void *closure_data);
typedef void (*Perftools__Profiles__MapIntFieldEntry_Closure)
                 (const Perftools__Profiles__MapIntFieldEntry *message,
                  void *closure_data);
typedef void (*Perftools__Profiles__Sample_Closure)
                 (const Perftools__Profiles__Sample *message,
                  void *closure_data);
typedef void (*Perftools__Profiles__Label_Closure)
                 (const Perftools__Profiles__Label *message,
                  void *closure_data);
typedef void (*Perftools__Profiles__Mapping_Closure)
                 (const Perftools__Profiles__Mapping *message,
                  void *closure_data);
typedef void (*Perftools__Profiles__Location_Closure)
                 (const Perftools__Profiles__Location *message,
                  void *closure_data);
typedef void (*Perftools__Profiles__Line_Closure)
                 (const Perftools__Profiles__Line *message,
                  void *closure_data);
typedef void (*Perftools__Profiles__Function_Closure)
                 (const Perftools__Profiles__Function *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor perftools__profiles__profile__descriptor;
extern const ProtobufCMessageDescriptor perftools__profiles__value_type__descriptor;
extern const ProtobufCMessageDescriptor perftools__profiles__map_str_field_entry__descriptor;
extern const ProtobufCMessageDescriptor perftools__profiles__map_int_field_entry__descriptor;
extern const ProtobufCMessageDescriptor perftools__profiles__sample__descriptor;
extern const ProtobufCMessageDescriptor perftools__profiles__label__descriptor;
extern const ProtobufCMessageDescriptor perftools__profiles__mapping__descriptor;
extern const ProtobufCMessageDescriptor perftools__profiles__location__descriptor;
extern const ProtobufCMessageDescriptor perftools__profiles__line__descriptor;
extern const ProtobufCMessageDescriptor perftools__profiles__function__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_profile_2eproto__INCLUDED */
