/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: functionInfo.proto */

#ifndef PROTOBUF_C_functionInfo_2eproto__INCLUDED
#define PROTOBUF_C_functionInfo_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Perftools__Symbols__FunctionInfo Perftools__Symbols__FunctionInfo;
typedef struct _Perftools__Symbols__CodeInfo Perftools__Symbols__CodeInfo;
typedef struct _Perftools__Symbols__CodeRegion Perftools__Symbols__CodeRegion;
typedef struct _Perftools__Symbols__SourceFileInfo Perftools__Symbols__SourceFileInfo;
typedef struct _Perftools__Symbols__ModuleInfo Perftools__Symbols__ModuleInfo;
typedef struct _Perftools__Symbols__LineNumberMappings Perftools__Symbols__LineNumberMappings;
typedef struct _Perftools__Symbols__LineNumberMapEntry Perftools__Symbols__LineNumberMapEntry;
typedef struct _Perftools__Symbols__Timing Perftools__Symbols__Timing;
typedef struct _Perftools__Symbols__Mapping Perftools__Symbols__Mapping;


/* --- enums --- */


/* --- messages --- */

struct  _Perftools__Symbols__FunctionInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_functionid;
  uint64_t functionid;
  char *functionname;
  /*
   * Jited code information.
   */
  Perftools__Symbols__CodeInfo *codeinfo;
  /*
   * Information about source file.
   */
  Perftools__Symbols__SourceFileInfo *sourcefileinfo;
  /*
   *Information about module.
   */
  Perftools__Symbols__ModuleInfo *moduleinfo;
  /*
   * Code and lines mappings.
   */
  Perftools__Symbols__LineNumberMappings *linenumbermappings;
  /*
   * Function load time and room for extending with
   */
  Perftools__Symbols__Timing *timing;
};
#define PERFTOOLS__SYMBOLS__FUNCTION_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__symbols__function_info__descriptor) \
    , 0,0, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Perftools__Symbols__CodeInfo
{
  ProtobufCMessage base;
  /*
   * Code regions.
   */
  size_t n_coderegions;
  Perftools__Symbols__CodeRegion **coderegions;
};
#define PERFTOOLS__SYMBOLS__CODE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__symbols__code_info__descriptor) \
    , 0,NULL }


struct  _Perftools__Symbols__CodeRegion
{
  ProtobufCMessage base;
  /*
   * Start address of Jited code.
   */
  protobuf_c_boolean has_startaddr;
  uint64_t startaddr;
  /*
   * Array of Jited code.
   */
  protobuf_c_boolean has_buffer;
  ProtobufCBinaryData buffer;
};
#define PERFTOOLS__SYMBOLS__CODE_REGION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__symbols__code_region__descriptor) \
    , 0,0, 0,{0,NULL} }


struct  _Perftools__Symbols__SourceFileInfo
{
  ProtobufCMessage base;
  char *sourcefilename;
};
#define PERFTOOLS__SYMBOLS__SOURCE_FILE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__symbols__source_file_info__descriptor) \
    , NULL }


struct  _Perftools__Symbols__ModuleInfo
{
  ProtobufCMessage base;
  char *modulename;
};
#define PERFTOOLS__SYMBOLS__MODULE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__symbols__module_info__descriptor) \
    , NULL }


struct  _Perftools__Symbols__LineNumberMappings
{
  ProtobufCMessage base;
  /*
   * Mappings between native
   */
  size_t n_nativetosourcemap;
  Perftools__Symbols__LineNumberMapEntry **nativetosourcemap;
};
#define PERFTOOLS__SYMBOLS__LINE_NUMBER_MAPPINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__symbols__line_number_mappings__descriptor) \
    , 0,NULL }


struct  _Perftools__Symbols__LineNumberMapEntry
{
  ProtobufCMessage base;
  protobuf_c_boolean has_startoffset;
  uint32_t startoffset;
  protobuf_c_boolean has_endoffset;
  uint32_t endoffset;
  protobuf_c_boolean has_linenumber;
  uint32_t linenumber;
};
#define PERFTOOLS__SYMBOLS__LINE_NUMBER_MAP_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__symbols__line_number_map_entry__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Perftools__Symbols__Timing
{
  ProtobufCMessage base;
  protobuf_c_boolean has_loadtime;
  int64_t loadtime;
};
#define PERFTOOLS__SYMBOLS__TIMING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__symbols__timing__descriptor) \
    , 0,0 }


struct  _Perftools__Symbols__Mapping
{
  ProtobufCMessage base;
  protobuf_c_boolean has_start;
  uint64_t start;
  protobuf_c_boolean has_limit;
  uint64_t limit;
  protobuf_c_boolean has_offset;
  uint64_t offset;
  char *file;
  protobuf_c_boolean has_loadtime;
  int64_t loadtime;
};
#define PERFTOOLS__SYMBOLS__MAPPING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perftools__symbols__mapping__descriptor) \
    , 0,0, 0,0, 0,0, NULL, 0,0 }


/* Perftools__Symbols__FunctionInfo methods */
void   perftools__symbols__function_info__init
                     (Perftools__Symbols__FunctionInfo         *message);
size_t perftools__symbols__function_info__get_packed_size
                     (const Perftools__Symbols__FunctionInfo   *message);
size_t perftools__symbols__function_info__pack
                     (const Perftools__Symbols__FunctionInfo   *message,
                      uint8_t             *out);
size_t perftools__symbols__function_info__pack_to_buffer
                     (const Perftools__Symbols__FunctionInfo   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Symbols__FunctionInfo *
       perftools__symbols__function_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__symbols__function_info__free_unpacked
                     (Perftools__Symbols__FunctionInfo *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Symbols__CodeInfo methods */
void   perftools__symbols__code_info__init
                     (Perftools__Symbols__CodeInfo         *message);
size_t perftools__symbols__code_info__get_packed_size
                     (const Perftools__Symbols__CodeInfo   *message);
size_t perftools__symbols__code_info__pack
                     (const Perftools__Symbols__CodeInfo   *message,
                      uint8_t             *out);
size_t perftools__symbols__code_info__pack_to_buffer
                     (const Perftools__Symbols__CodeInfo   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Symbols__CodeInfo *
       perftools__symbols__code_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__symbols__code_info__free_unpacked
                     (Perftools__Symbols__CodeInfo *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Symbols__CodeRegion methods */
void   perftools__symbols__code_region__init
                     (Perftools__Symbols__CodeRegion         *message);
size_t perftools__symbols__code_region__get_packed_size
                     (const Perftools__Symbols__CodeRegion   *message);
size_t perftools__symbols__code_region__pack
                     (const Perftools__Symbols__CodeRegion   *message,
                      uint8_t             *out);
size_t perftools__symbols__code_region__pack_to_buffer
                     (const Perftools__Symbols__CodeRegion   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Symbols__CodeRegion *
       perftools__symbols__code_region__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__symbols__code_region__free_unpacked
                     (Perftools__Symbols__CodeRegion *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Symbols__SourceFileInfo methods */
void   perftools__symbols__source_file_info__init
                     (Perftools__Symbols__SourceFileInfo         *message);
size_t perftools__symbols__source_file_info__get_packed_size
                     (const Perftools__Symbols__SourceFileInfo   *message);
size_t perftools__symbols__source_file_info__pack
                     (const Perftools__Symbols__SourceFileInfo   *message,
                      uint8_t             *out);
size_t perftools__symbols__source_file_info__pack_to_buffer
                     (const Perftools__Symbols__SourceFileInfo   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Symbols__SourceFileInfo *
       perftools__symbols__source_file_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__symbols__source_file_info__free_unpacked
                     (Perftools__Symbols__SourceFileInfo *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Symbols__ModuleInfo methods */
void   perftools__symbols__module_info__init
                     (Perftools__Symbols__ModuleInfo         *message);
size_t perftools__symbols__module_info__get_packed_size
                     (const Perftools__Symbols__ModuleInfo   *message);
size_t perftools__symbols__module_info__pack
                     (const Perftools__Symbols__ModuleInfo   *message,
                      uint8_t             *out);
size_t perftools__symbols__module_info__pack_to_buffer
                     (const Perftools__Symbols__ModuleInfo   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Symbols__ModuleInfo *
       perftools__symbols__module_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__symbols__module_info__free_unpacked
                     (Perftools__Symbols__ModuleInfo *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Symbols__LineNumberMappings methods */
void   perftools__symbols__line_number_mappings__init
                     (Perftools__Symbols__LineNumberMappings         *message);
size_t perftools__symbols__line_number_mappings__get_packed_size
                     (const Perftools__Symbols__LineNumberMappings   *message);
size_t perftools__symbols__line_number_mappings__pack
                     (const Perftools__Symbols__LineNumberMappings   *message,
                      uint8_t             *out);
size_t perftools__symbols__line_number_mappings__pack_to_buffer
                     (const Perftools__Symbols__LineNumberMappings   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Symbols__LineNumberMappings *
       perftools__symbols__line_number_mappings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__symbols__line_number_mappings__free_unpacked
                     (Perftools__Symbols__LineNumberMappings *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Symbols__LineNumberMapEntry methods */
void   perftools__symbols__line_number_map_entry__init
                     (Perftools__Symbols__LineNumberMapEntry         *message);
size_t perftools__symbols__line_number_map_entry__get_packed_size
                     (const Perftools__Symbols__LineNumberMapEntry   *message);
size_t perftools__symbols__line_number_map_entry__pack
                     (const Perftools__Symbols__LineNumberMapEntry   *message,
                      uint8_t             *out);
size_t perftools__symbols__line_number_map_entry__pack_to_buffer
                     (const Perftools__Symbols__LineNumberMapEntry   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Symbols__LineNumberMapEntry *
       perftools__symbols__line_number_map_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__symbols__line_number_map_entry__free_unpacked
                     (Perftools__Symbols__LineNumberMapEntry *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Symbols__Timing methods */
void   perftools__symbols__timing__init
                     (Perftools__Symbols__Timing         *message);
size_t perftools__symbols__timing__get_packed_size
                     (const Perftools__Symbols__Timing   *message);
size_t perftools__symbols__timing__pack
                     (const Perftools__Symbols__Timing   *message,
                      uint8_t             *out);
size_t perftools__symbols__timing__pack_to_buffer
                     (const Perftools__Symbols__Timing   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Symbols__Timing *
       perftools__symbols__timing__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__symbols__timing__free_unpacked
                     (Perftools__Symbols__Timing *message,
                      ProtobufCAllocator *allocator);
/* Perftools__Symbols__Mapping methods */
void   perftools__symbols__mapping__init
                     (Perftools__Symbols__Mapping         *message);
size_t perftools__symbols__mapping__get_packed_size
                     (const Perftools__Symbols__Mapping   *message);
size_t perftools__symbols__mapping__pack
                     (const Perftools__Symbols__Mapping   *message,
                      uint8_t             *out);
size_t perftools__symbols__mapping__pack_to_buffer
                     (const Perftools__Symbols__Mapping   *message,
                      ProtobufCBuffer     *buffer);
Perftools__Symbols__Mapping *
       perftools__symbols__mapping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perftools__symbols__mapping__free_unpacked
                     (Perftools__Symbols__Mapping *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Perftools__Symbols__FunctionInfo_Closure)
                 (const Perftools__Symbols__FunctionInfo *message,
                  void *closure_data);
typedef void (*Perftools__Symbols__CodeInfo_Closure)
                 (const Perftools__Symbols__CodeInfo *message,
                  void *closure_data);
typedef void (*Perftools__Symbols__CodeRegion_Closure)
                 (const Perftools__Symbols__CodeRegion *message,
                  void *closure_data);
typedef void (*Perftools__Symbols__SourceFileInfo_Closure)
                 (const Perftools__Symbols__SourceFileInfo *message,
                  void *closure_data);
typedef void (*Perftools__Symbols__ModuleInfo_Closure)
                 (const Perftools__Symbols__ModuleInfo *message,
                  void *closure_data);
typedef void (*Perftools__Symbols__LineNumberMappings_Closure)
                 (const Perftools__Symbols__LineNumberMappings *message,
                  void *closure_data);
typedef void (*Perftools__Symbols__LineNumberMapEntry_Closure)
                 (const Perftools__Symbols__LineNumberMapEntry *message,
                  void *closure_data);
typedef void (*Perftools__Symbols__Timing_Closure)
                 (const Perftools__Symbols__Timing *message,
                  void *closure_data);
typedef void (*Perftools__Symbols__Mapping_Closure)
                 (const Perftools__Symbols__Mapping *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor perftools__symbols__function_info__descriptor;
extern const ProtobufCMessageDescriptor perftools__symbols__code_info__descriptor;
extern const ProtobufCMessageDescriptor perftools__symbols__code_region__descriptor;
extern const ProtobufCMessageDescriptor perftools__symbols__source_file_info__descriptor;
extern const ProtobufCMessageDescriptor perftools__symbols__module_info__descriptor;
extern const ProtobufCMessageDescriptor perftools__symbols__line_number_mappings__descriptor;
extern const ProtobufCMessageDescriptor perftools__symbols__line_number_map_entry__descriptor;
extern const ProtobufCMessageDescriptor perftools__symbols__timing__descriptor;
extern const ProtobufCMessageDescriptor perftools__symbols__mapping__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_functionInfo_2eproto__INCLUDED */
